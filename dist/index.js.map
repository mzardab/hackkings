{"version":3,"sources":["../src/index.js"],"names":["app","use","json","get","req","res","next","status","message","name","params","err","Error","error","server","createServer","listen"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;AACA;;AAEA,IAAMA,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQ,qBAAWC,IAAX,EAAR;;AAEA;AACAF,IAAIG,GAAJ,CAAQ,QAAR,EAAkB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClCD,QAAIE,MAAJ,CAAW,GAAX,EAAgBL,IAAhB,CAAqB,EAACM,SAAS,eAAV,EAArB;AACH,CAFD;;AAIAR,IAAIG,GAAJ,CAAQ,cAAR,EAAwB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACxC,QAAMG,OAAOL,IAAIM,MAAJ,CAAWD,IAAxB;AACAJ,QAAIE,MAAJ,CAAW,GAAX,EAAgBL,IAAhB,CAAqB,EAACM,qBAAmBC,IAAnB,MAAD,EAArB;AACH,CAHD;;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACAT,IAAIC,GAAJ,CAAQ,UAACG,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACxB,QAAMK,MAAM,IAAIC,KAAJ,EAAZ;AACAD,QAAIH,OAAJ,GAAc,WAAd;AACAG,QAAIJ,MAAJ,GAAa,GAAb;AACAD,SAAKK,GAAL;AACH,CALD;;AAOAX,IAAIC,GAAJ,CAAQ,UAACU,GAAD,EAAMP,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,EAAyB;AAC7BD,QAAIE,MAAJ,CAAWI,IAAIJ,MAAJ,IAAc,GAAzB,EAA8BL,IAA9B,CAAmC;AAC/BM,iBAASG,IAAIH,OADkB;AAE/BK,eAAO,EAACF,QAAD;AAFwB,KAAnC;AAIH,CALD;;AAOA;AACAX,IAAIc,MAAJ,GAAa,eAAKC,YAAL,CAAkBf,GAAlB,CAAb;AACAA,IAAIc,MAAJ,CAAWE,MAAX,CAAkB,IAAlB;;kBAEehB,G","file":"index.js","sourcesContent":["import express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport http from 'http';\r\nimport request from 'request';\r\n\r\n// Config file for API key for Capital One API \r\n//import config from './config';\r\n\r\nconst app = express();\r\napp.use(bodyParser.json());\r\n\r\n// Routes\r\napp.get('/hello', (req, res, next) => {\r\n    res.status(200).json({message: 'Hello, World!'});\r\n});\r\n\r\napp.get('/hello/:name', (req, res, next) => {\r\n    const name = req.params.name;\r\n    res.status(200).json({message: `Hello, ${name}!`});\r\n});\r\n\r\n// app.get('/atms', (req, res, next) => {\r\n//     request(`http://api.reimaginebanking.com/atms?key=${config.nessieApiKey}`, (err, response, body) => {\r\n//        if (!err) {\r\n//            const bodyJson = JSON.parse(body).data;\r\n\r\n//            bodyJson.map((obj) => {\r\n//                delete obj._id;\r\n//                delete obj.accessibility;\r\n//                delete obj.hours;\r\n//                delete obj.address;\r\n//                delete obj.language_list;\r\n\r\n//                return obj;\r\n//            });\r\n\r\n//            res.status(200).send(bodyJson);\r\n//        } else {\r\n//            next(err);\r\n//        }\r\n//     });\r\n// });\r\n\r\n// Error Handlers\r\napp.use((req, res, next) => {\r\n    const err = new Error();\r\n    err.message = 'Not Found';\r\n    err.status = 404;\r\n    next(err);\r\n});\r\n\r\napp.use((err, req, res, next) => {\r\n    res.status(err.status || 500).json({\r\n        message: err.message,\r\n        error: {err}\r\n    });\r\n});\r\n\r\n// Boot up HTTP server\r\napp.server = http.createServer(app);\r\napp.server.listen(3000);\r\n\r\nexport default app;"]}